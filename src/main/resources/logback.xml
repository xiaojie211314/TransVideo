<?xml version="1.0" encoding="UTF-8"?>
<!--debug="true" : 打印logback内部状态（默认当logback运行出错时才会打印内部状态 ），配置该属性后打印条件如下（同时满足）：
    1、找到配置文件 2、配置文件是一个格式正确的xml文件 也可编程实现打印内部状态，例如： LoggerContext lc = (LoggerContext)
    LoggerFactory.getILoggerFactory(); StatusPrinter.print(lc); -->
<!-- scan="true" ： 自动扫描该配置文件，若有修改则重新加载该配置文件 -->
<!-- scanPeriod="30 seconds" : 配置自动扫面时间间隔（单位可以是：milliseconds, seconds, minutes
    or hours，默认为：milliseconds）， 默认为1分钟，scan="true"时该配置才会生效 -->
<configuration debug="false" scan="true" scanPeriod="30 seconds" packagingData="true">
    <!-- 设置 logger context 名称,一旦设置不可改变，默认为default -->
    <contextName>video</contextName>
    <property resource="proper.properties" />
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- encoders are by default assigned the type ch.qos.logback.classic.encoder.PatternLayoutEncoder -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} [%M : %line] - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>

    </appender>

    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 当前活动日志文件名 -->
        <file>${video.log}/log.log</file>

        <!-- 文件滚动策略根据%d{patter}中的“patter”而定，此处为每天产生一个文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 一天一归档文件名“.zip或.gz结尾”,表示归档文件自动压缩 -->
            <FileNamePattern>${video.log}/log_%d{yyyyMMdd}.zip</FileNamePattern>
            <maxHistory>30</maxHistory>

        </rollingPolicy>

        <!--文件归档log_1-10-->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">-->
        <!--<fileNamePattern>${video.log}/log_%i.log</fileNamePattern>-->
        <!--<minIndex>1</minIndex>-->
        <!--<maxIndex>10</maxIndex>-->
        <!--</rollingPolicy>-->

        <!--当文件生成20MB归档 1-10 -->
        <!--<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">-->
        <!--<maxFileSize>100KB</maxFileSize>-->
        <!--</triggeringPolicy>-->

        <!--<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">-->
        <!--&lt;!&ndash;rollover daily&ndash;&gt;-->
        <!--<fileNamePattern>${video.log}/log_%d{yyyyMMddHHmm}.zip</fileNamePattern>-->
        <!--&lt;!&ndash;each file should be at most 30MB, keep 60 days worth of history, but at most 20GB&ndash;&gt;-->
        <!--<maxFileSize>20MB</maxFileSize>-->
        <!--<maxHistory>30</maxHistory>-->
        <!--<totalSizeCap>10GB</totalSizeCap>-->

        <!--</rollingPolicy>-->


        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}[%-5level][%thread]%logger{36} - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 日志级别若没显示定义，则继承最近的父logger（该logger需显示定义level,直到rootLogger）的日志级别-->
    <!-- logger的appender默认具有累加性（默认日志输出到当前logger的appender和所有祖先logger的appender中），可通过配置 “additivity”属性修改默认行为-->
    <logger name="com.soocedu" level="${video.log.level}" additivity="false">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILE"/>
    </logger>

    <!-- 至多只能配置一个root -->
    <root level="${video.log.level}">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILE"/>
    </root>
</configuration>